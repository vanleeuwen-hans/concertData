[{"path":"https://vanleeuwen-hans.github.io/concertData/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"van Leeuwen H (2024). concertData: Analyse visualise concert tour song data. R package version 0.1.0, https://vanleeuwen-hans.github.io/concertData/.","code":"@Manual{,   title = {concertData: Analyse and visualise concert tour song data},   author = {Hans {van Leeuwen}},   year = {2024},   note = {R package version 0.1.0},   url = {https://vanleeuwen-hans.github.io/concertData/}, }"},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"concertdata","dir":"","previous_headings":"","what":"Analyse and visualise concert tour song data","title":"Analyse and visualise concert tour song data","text":"concertData R package designed process, analyze visualize concert data, particular information dates, venues, cities, songs, shows, .","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Analyse and visualise concert tour song data","text":"can install latest version concertData GitHub using devtools package:","code":"# Install devtools if you haven't already install.packages(\"devtools\")  # Install concertData from GitHub devtools::install_github(\"vanleeuwen-hans/concertData\")"},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Analyse and visualise concert tour song data","text":"Detailed examples use concertData package can seen U2 Data Analytics report, example: - Basic Statisitics U2 Concerts - Visual Exploration - Multiple Setlist Alignment","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"data","dir":"","previous_headings":"","what":"Data","title":"Analyse and visualise concert tour song data","text":"data fame used package contains information played songs concerts. info U2 Data Analytics colnames(concert_data) “showID” “tour” “leg” “date” “venue” “city” “state” “country” “song_position” “snippet” “encore” “song_title” “show_url” “song_url” “song_lyrics”","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Analyse and visualise concert tour song data","text":"Contributions welcome! ’d like contribute concertData, please follow steps: - Fork repository. - Create new branch (git checkout -b feature/YourFeature). - Make changes commit (git commit -m ‘Add feature’). - Push branch (git push origin feature/YourFeature). - Open pull request.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Analyse and visualise concert tour song data","text":"project licensed [License Name] - see LICENSE file details.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Analyse and visualise concert tour song data","text":"Many thanks Matthias Mühlbradt u2gigs.com allowing use carefully collected u2 concert data. Thanks Google Google Data Analytics certification program work part Capstone Project. Thanks developers Claude.ai Perplexity.ai, tools useful developing trouble shooting code.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Analyse and visualise concert tour song data","text":"questions feedback, please contact Hans van Leeuwen vanleeuwen@hansgmail.com.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/align_pairwise_setlists.html","id":null,"dir":"Reference","previous_headings":"","what":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","title":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","text":"function performs pairwise sequence alignment setlists using dynamic programming. calculates optimal alignment two sequences returns aligned sequences along similarity score.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/align_pairwise_setlists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","text":"","code":"align_pairwise_setlists(   seq1,   seq2,   gap_penalty = -1,   match_score = 2,   mismatch_penalty = -1 )"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/align_pairwise_setlists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","text":"seq1 character vector representing first setlist sequence. seq2 character vector representing second setlist sequence. gap_penalty Numeric value gap penalty (default: -1). match_score Numeric value match score (default: 2). mismatch_penalty Numeric value mismatch penalty (default: -1).","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/align_pairwise_setlists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","text":"list containing: seq1_aligned aligned sequence seq1 seq2_aligned aligned sequence seq2 similarity numeric value representing similarity sequences","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/align_pairwise_setlists.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","text":"Perform Pairwise Sequence Alignment Setlists function uses scoring system defined input parameters: - Match score (default: 2) - Mismatch penalty (default: -1) - Gap penalty (default: -1) alignment performed using dynamic programming approach scoring matrix traceback matrix determine optimal alignment.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/align_pairwise_setlists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pairwise Sequence Alignment for Setlists — align_pairwise_setlists","text":"","code":"seq1 <- c(\"A\", \"B\", \"C\", \"D\") seq2 <- c(\"A\", \"C\", \"D\") result <- align_pairwise_setlists(seq1, seq2) print(result) #> $seq1_aligned #> [1] \"A\" \"B\" \"C\" \"D\" #>  #> $seq2_aligned #> [1] \"A\" NA  \"C\" \"D\" #>  #> $similarity #> [1] 0.75 #>   # Using custom scoring parameters result_custom <- align_pairwise_setlists(seq1, seq2, gap_penalty = -2, match_score = 3, mismatch_penalty = -2) print(result_custom) #> $seq1_aligned #> [1] \"A\" \"B\" \"C\" \"D\" #>  #> $seq2_aligned #> [1] \"A\" NA  \"C\" \"D\" #>  #> $similarity #> [1] 0.75 #>"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/analyze_song_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Analyze Song Positions in Setlists — analyze_song_positions","title":"Analyze Song Positions in Setlists — analyze_song_positions","text":"Performs analysis song positions within setlists across different tours.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/analyze_song_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analyze Song Positions in Setlists — analyze_song_positions","text":"","code":"analyze_song_positions(data, max_songs_by_tour, tour_order = NULL)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/analyze_song_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analyze Song Positions in Setlists — analyze_song_positions","text":"data data frame concertData format, containing least 'tour', 'showID', 'song_title', 'song_position' columns. max_songs_by_tour data frame 'tour' 'max_songs' columns, typically output longest_setlist_by_tour function. tour_order data frame 'tour' column specifying desired order tours (optional).","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/analyze_song_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analyze Song Positions in Setlists — analyze_song_positions","text":"data frame columns: tour: Name tour (factor tour_order provided) position_bin: song position setlist unique_songs: Number unique songs played position total_occurrences: Total number songs played position most_common_song: frequently played song position most_common_freq: Frequency common song predictability: Ratio most_common_freq total_occurrences variability: 1 - predictability","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/analyze_song_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analyze Song Positions in Setlists — analyze_song_positions","text":"","code":"if (FALSE) { # \\dontrun{ max_songs <- longest_setlist_by_tour(concert_data) tour_order <- tour_order_date(concert_data) position_analysis <- analyze_song_positions(concert_data, max_songs, tour_order) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_comprehensive_tour_statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Comprehensive Tour Statistics — calculate_comprehensive_tour_statistics","title":"Calculate Comprehensive Tour Statistics — calculate_comprehensive_tour_statistics","text":"Computes various statistics tour, including show counts, song counts, variability metrics.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_comprehensive_tour_statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Comprehensive Tour Statistics — calculate_comprehensive_tour_statistics","text":"","code":"calculate_comprehensive_tour_statistics(data_inc_snippets, tour_order = NULL)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_comprehensive_tour_statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Comprehensive Tour Statistics — calculate_comprehensive_tour_statistics","text":"data_inc_snippets data frame similar 'data' including snippet performances. tour_order data frame 'tour' column specifying desired order tours (optional). data data frame concertData format, containing least 'tour', 'showID', 'song_title', 'song_position' columns.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_comprehensive_tour_statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Comprehensive Tour Statistics — calculate_comprehensive_tour_statistics","text":"data frame columns: tour: Name tour (factor tour_order provided) total_shows: Total number shows tour avg_songs_per_show: Average number songs per show total_unique_songs: Total number unique songs played (excluding snippets) total_unique_snippets: Total number unique snippets played overall_variability: Ratio unique songs average songs per show","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_comprehensive_tour_statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Comprehensive Tour Statistics — calculate_comprehensive_tour_statistics","text":"","code":"if (FALSE) { # \\dontrun{ tour_statistics <- calculate_comprehensive_tour_statistics(concert_data, concert_data_with_snippets, tour_order) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Distance Matrix from Sequences — calculate_distance_matrix","title":"Calculate Distance Matrix from Sequences — calculate_distance_matrix","text":"function calculates distance matrix based pairwise differences sequences.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Distance Matrix from Sequences — calculate_distance_matrix","text":"","code":"calculate_distance_matrix(sequences)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Distance Matrix from Sequences — calculate_distance_matrix","text":"sequences list character strings representing concert setlist sequences.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Distance Matrix from Sequences — calculate_distance_matrix","text":"distance matrix entry (, j) represents distance sequences j.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_distance_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Distance Matrix from Sequences — calculate_distance_matrix","text":"","code":"seq_list <- list(showID1408 = \"-5fD-UeE4OY-H]CJWhQla-mBk\", showID1320 = \"-5fD-^_E4OY-H]CJWhQeU-mBk\", showID1336 = \"5fD-UeE4OY-H]CJWhQei-mBk\") dist_matrix <- calculate_distance_matrix(seq_list) #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length #> Warning: longer object length is not a multiple of shorter object length"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_song_frequency_across_tours.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Song Frequency Across Tours — calculate_song_frequency_across_tours","title":"Calculate Song Frequency Across Tours — calculate_song_frequency_across_tours","text":"Computes frequency song played across different tours includes additional tour statistics.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_song_frequency_across_tours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Song Frequency Across Tours — calculate_song_frequency_across_tours","text":"","code":"calculate_song_frequency_across_tours(data, tour_stats, tour_order = NULL)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_song_frequency_across_tours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Song Frequency Across Tours — calculate_song_frequency_across_tours","text":"data data frame concertData format, containing least 'tour', 'song_title', 'showID' columns. tour_stats data frame containing tour statistics, including 'tour', 'total_shows', 'avg_songs_per_show', 'overall_variability', 'total_unique_snippets', 'total_unique_songs' columns. tour_order data frame 'tour' column specifying desired order tours (optional).","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_song_frequency_across_tours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Song Frequency Across Tours — calculate_song_frequency_across_tours","text":"data frame columns: tour: Name tour (factor) song_title: Title song song_count: Number shows song played avg_songs_per_show: Average number songs per show tour overall_variability: Overall variability metric tour total_shows: Total number shows tour total_unique_snippets: Total number unique snippets tour total_unique_songs: Total number unique songs tour song_frequency: Proportion shows song played","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_song_frequency_across_tours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Song Frequency Across Tours — calculate_song_frequency_across_tours","text":"","code":"if (FALSE) { # \\dontrun{ song_freq <- calculate_song_frequency_across_tours(concert_data, tour_statistics, tour_order) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_tour_correlation_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Tour Correlation Data Number Shows vs Unique Songs and Snippets — calculate_tour_correlation_data","title":"Calculate Tour Correlation Data Number Shows vs Unique Songs and Snippets — calculate_tour_correlation_data","text":"function transforms tour statistics long-format dataset              correlation analysis unique songs, unique snippets, number shows.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_tour_correlation_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Tour Correlation Data Number Shows vs Unique Songs and Snippets — calculate_tour_correlation_data","text":"","code":"calculate_tour_correlation_data(tour_stats)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_tour_correlation_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Tour Correlation Data Number Shows vs Unique Songs and Snippets — calculate_tour_correlation_data","text":"tour_stats data frame containing tour statistics least 'total_unique_songs', 'total_unique_snippets', 'total_shows' columns.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_tour_correlation_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Tour Correlation Data Number Shows vs Unique Songs and Snippets — calculate_tour_correlation_data","text":"data frame long format columns: metric_type: Type metric (\"Unique Songs\" \"Unique Snippets\"). unique_count: Count unique songs snippets. total_shows: Number shows corresponding metric type.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/calculate_tour_correlation_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Tour Correlation Data Number Shows vs Unique Songs and Snippets — calculate_tour_correlation_data","text":"","code":"if (FALSE) { # \\dontrun{ correlation_data <- calculate_tour_correlation_data(tour_stats) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/codify_tour_song_titles.html","id":null,"dir":"Reference","previous_headings":"","what":"Codify Tour Song Titles — codify_tour_song_titles","title":"Codify Tour Song Titles — codify_tour_song_titles","text":"function takes concertData data frame, unique songs data set creates mapping 4 columns: song title, 4-letter code, hex character, hex value.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/codify_tour_song_titles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Codify Tour Song Titles — codify_tour_song_titles","text":"","code":"codify_tour_song_titles(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/codify_tour_song_titles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Codify Tour Song Titles — codify_tour_song_titles","text":"concert_data data frame concertData format.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/codify_tour_song_titles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Codify Tour Song Titles — codify_tour_song_titles","text":"data frame columns: song_title: title song. four_letter_code: unique 4-letter code song. hex_char: unique hex character representation 4-letter code. hex_value: unique hex value character. Returns NULL songs found dataset.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/codify_tour_song_titles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Codify Tour Song Titles — codify_tour_song_titles","text":"","code":"if (FALSE) { # \\dontrun{ codified_songs <- codify_tour_song_titles(concert_data) print(codified_songs) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_showsNoSetlist.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Shows with No Setlist from concertData — concertData_remove_showsNoSetlist","title":"Remove Shows with No Setlist from concertData — concertData_remove_showsNoSetlist","text":"Filters shows setlist (songs) concertData data frame.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_showsNoSetlist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Shows with No Setlist from concertData — concertData_remove_showsNoSetlist","text":"","code":"concertData_remove_showsNoSetlist(data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_showsNoSetlist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Shows with No Setlist from concertData — concertData_remove_showsNoSetlist","text":"data data frame concertData format.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_showsNoSetlist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Shows with No Setlist from concertData — concertData_remove_showsNoSetlist","text":"filtered concertData data frame shows setlist removed.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_showsNoSetlist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Shows with No Setlist from concertData — concertData_remove_showsNoSetlist","text":"","code":"if (FALSE) { # \\dontrun{ filtered_data <- concertData_remove_showsNoSetlist(concert_data) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_snippets.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Snippets from concertData — concertData_remove_snippets","title":"Remove Snippets from concertData — concertData_remove_snippets","text":"Filters snippet performances concertData data frame.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_snippets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Snippets from concertData — concertData_remove_snippets","text":"","code":"concertData_remove_snippets(data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_snippets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Snippets from concertData — concertData_remove_snippets","text":"data data frame concertData format.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_snippets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Snippets from concertData — concertData_remove_snippets","text":"filtered concertData data frame snippet performances removed.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_snippets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Snippets from concertData — concertData_remove_snippets","text":"","code":"if (FALSE) { # \\dontrun{ filtered_data <- concertData_remove_snippets(concert_data) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_tours.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove Specified Tours from concertData — concertData_remove_tours","title":"Remove Specified Tours from concertData — concertData_remove_tours","text":"Filters specified tours concertData data frame.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_tours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove Specified Tours from concertData — concertData_remove_tours","text":"","code":"concertData_remove_tours(data, excluded_tours)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_tours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove Specified Tours from concertData — concertData_remove_tours","text":"data data frame concertData format. excluded_tours character vector tour names excluded.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_tours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove Specified Tours from concertData — concertData_remove_tours","text":"filtered concertData data frame specified tours removed.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/concertData_remove_tours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove Specified Tours from concertData — concertData_remove_tours","text":"","code":"if (FALSE) { # \\dontrun{ filtered_data <- concertData_remove_tours(concert_data, c(\"Tour1\", \"Tour2\")) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_decade.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Shows by Decade — count_shows_by_decade","title":"Count Shows by Decade — count_shows_by_decade","text":"Calculates number shows performed decade based input data.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_decade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Shows by Decade — count_shows_by_decade","text":"","code":"count_shows_by_decade(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_decade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Shows by Decade — count_shows_by_decade","text":"concert_data data frame containing concert information columns: showID (unique identifier show) date (Date format)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_decade.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Shows by Decade — count_shows_by_decade","text":"data frame columns:         decade (factor levels ordered chronologically)         count (number shows decade)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_decade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Shows by Decade — count_shows_by_decade","text":"","code":"if (FALSE) { # \\dontrun{ decade_counts <- count_shows_by_decade(concert_data) print(decade_counts) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_month.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Shows by Month — count_shows_by_month","title":"Count Shows by Month — count_shows_by_month","text":"Calculates number shows performed month.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Shows by Month — count_shows_by_month","text":"","code":"count_shows_by_month(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Shows by Month — count_shows_by_month","text":"concert_data data frame containing concert information columns: showID (unique identifier show) date (Date format)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Shows by Month — count_shows_by_month","text":"data frame columns:         month (factor levels ordered Jan Dec)         count (number shows month)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Shows by Month — count_shows_by_month","text":"","code":"if (FALSE) { # \\dontrun{ month_counts <- count_shows_by_month(concert_data) print(month_counts) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_weekday.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Shows by Weekday — count_shows_by_weekday","title":"Count Shows by Weekday — count_shows_by_weekday","text":"Calculates number shows performed day week.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_weekday.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Shows by Weekday — count_shows_by_weekday","text":"","code":"count_shows_by_weekday(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_weekday.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Shows by Weekday — count_shows_by_weekday","text":"concert_data data frame containing concert information columns: showID (unique identifier show) date (Date format)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_weekday.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Shows by Weekday — count_shows_by_weekday","text":"data frame columns:         weekday (factor levels ordered Monday Sunday)         count (number shows weekday)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/count_shows_by_weekday.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count Shows by Weekday — count_shows_by_weekday","text":"","code":"if (FALSE) { # \\dontrun{ weekday_counts <- count_shows_by_weekday(concert_data) print(weekday_counts) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_date_tree_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Create City Date Tree Labels — create_city_date_tree_labels","title":"Create City Date Tree Labels — create_city_date_tree_labels","text":"function generates tree labels based concert data, creating labels combine city date information. input data must contain showIDs shows distance tree created.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_date_tree_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create City Date Tree Labels — create_city_date_tree_labels","text":"","code":"create_city_date_tree_labels(concert_data, setlist_tree, show_info)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_date_tree_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create City Date Tree Labels — create_city_date_tree_labels","text":"concert_data data frame containing concert information, including showID, city, date, country, leg. setlist_tree tree object containing tip labels corresponding showIDs. show_info data frame containing show information, including city-date, country, leg.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_date_tree_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create City Date Tree Labels — create_city_date_tree_labels","text":"character vector labels tree tips, formatted \"city - YYYY-MM-DD\".","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_date_tree_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create City Date Tree Labels — create_city_date_tree_labels","text":"","code":"concert_data <- data.frame(showID = c(1, 2), city = c(\"New York\", \"Los Angeles\"),                            date = as.Date(c(\"2023-10-01\", \"2023-10-02\")),                            country = c(\"USA\", \"USA\"), leg = c(\"Leg 1\", \"Leg 1\")) setlist_tree <- list(tip.label = c(\"showID1\", \"showID2\")) # Example tree structure show_info <- data.frame(city_date = paste(\"City\", 1:10),                          country = sample(c(\"USA\", \"Canada\"), 10, replace = TRUE),                          leg = sample(c(\"Leg 1\", \"Leg 2\"), 10, replace = TRUE)) labels <- create_city_date_tree_labels(concert_data, setlist_tree, show_info)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Create City Frequency Counts — create_city_frequency","title":"Create City Frequency Counts — create_city_frequency","text":"function creates frequency counts cities based unique shows joins result geocoded city data.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create City Frequency Counts — create_city_frequency","text":"","code":"create_city_frequency(unique_shows, geocoded_cities)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create City Frequency Counts — create_city_frequency","text":"unique_shows data frame containing unique show information. geocoded_cities data frame containing geocoded city information.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create City Frequency Counts — create_city_frequency","text":"data frame city frequency counts geocoded information.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_city_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create City Frequency Counts — create_city_frequency","text":"","code":"unique_shows <- data.frame(   showID = 1:3,   city = c(\"New York\", \"London\", \"New York\"),   country = c(\"USA\", \"UK\", \"USA\"),   date = as.Date(c(\"2023-01-01\", \"2023-02-01\", \"2023-03-01\")),   venue = c(\"Madison Square Garden\", \"Wembley Stadium\", \"Yankee Stadium\"),   tour = c(\"Tour A\", \"Tour B\", \"Tour A\") ) geocoded_cities <- data.frame(   city = c(\"New York\", \"London\"),   country = c(\"USA\", \"UK\"),   lat = c(40.7128, 51.5074),   lon = c(-74.0060, -0.1278) ) city_freq <- create_city_frequency(unique_shows, geocoded_cities)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_decade_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Decade-Based City Frequency — create_decade_frequency","title":"Create Decade-Based City Frequency — create_decade_frequency","text":"function creates decade-based frequency count shows city, joins information geocoded city data.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_decade_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Decade-Based City Frequency — create_decade_frequency","text":"","code":"create_decade_frequency(unique_shows, geocoded_cities)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_decade_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Decade-Based City Frequency — create_decade_frequency","text":"unique_shows data frame containing unique show information, including 'showID', 'city', 'country', 'date' columns. geocoded_cities data frame containing geocoded information cities.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_decade_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Decade-Based City Frequency — create_decade_frequency","text":"data frame decade-based show counts city, including geocoded information.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_decade_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Decade-Based City Frequency — create_decade_frequency","text":"","code":"unique_shows <- data.frame(   showID = 1:5,   city = c(\"New York\", \"London\", \"Paris\", \"New York\", \"Tokyo\"),   country = c(\"USA\", \"UK\", \"France\", \"USA\", \"Japan\"),   date = as.Date(c(\"1990-01-01\", \"2000-01-01\", \"2010-01-01\", \"1995-01-01\", \"2020-01-01\")) ) geocoded_cities <- data.frame(   city = c(\"New York\", \"London\", \"Paris\", \"Tokyo\"),   country = c(\"USA\", \"UK\", \"France\", \"Japan\"),   lat = c(40.7128, 51.5074, 48.8566, 35.6762),   lon = c(-74.0060, -0.1278, 2.3522, 139.6503) ) decade_frequency <- create_decade_frequency(unique_shows, geocoded_cities)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_distinct_palette.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Palette of Distinct Colors — create_distinct_palette","title":"Create a Palette of Distinct Colors — create_distinct_palette","text":"function generates palette distinct colors maximizes differences adjacent colors. uses HSV color space create visually appealing distinguishable set colors.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_distinct_palette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Palette of Distinct Colors — create_distinct_palette","text":"","code":"create_distinct_palette(n)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_distinct_palette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Palette of Distinct Colors — create_distinct_palette","text":"n integer specifying number distinct colors generate.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_distinct_palette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Palette of Distinct Colors — create_distinct_palette","text":"character vector hex color codes.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_distinct_palette.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Palette of Distinct Colors — create_distinct_palette","text":"Create Palette Distinct Colors function creates colors : Using full range hues (0-1) Keeping saturation relatively high (0.7-1) Alternating value (brightness) higher lower values (0.6-0.9) Hues shuffled avoid similar adjacent colors.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_distinct_palette.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Palette of Distinct Colors — create_distinct_palette","text":"","code":"if (FALSE) { # \\dontrun{ # Generate a palette of 10 distinct colors colors <- create_distinct_palette(10) # Use the colors in a plot plot(1:10, 1:10, col = colors, pch = 19, cex = 3) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_four_letter_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate 4-Letter Code from Song Title — create_four_letter_code","title":"Generate 4-Letter Code from Song Title — create_four_letter_code","text":"function creates unique 4-letter code song title. generated code used display multiple setlist alignment plot.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_four_letter_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate 4-Letter Code from Song Title — create_four_letter_code","text":"","code":"create_four_letter_code(title, used_codes)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_four_letter_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate 4-Letter Code from Song Title — create_four_letter_code","text":"title character string representing song title. used_codes vector already used codes ensure uniqueness.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_four_letter_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate 4-Letter Code from Song Title — create_four_letter_code","text":"character string length 4 representing unique code song.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_four_letter_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate 4-Letter Code from Song Title — create_four_letter_code","text":"","code":"if (FALSE) { # \\dontrun{ code <- create_four_letter_code(\"With or Without You\", c()) print(code)  # Output: \"WOWY\" } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ggtree Plot — create_ggtree_plot","title":"Create a ggtree Plot — create_ggtree_plot","text":"function generates ggtree plot given distance tree.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ggtree Plot — create_ggtree_plot","text":"","code":"create_ggtree_plot(setlist_tree)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ggtree Plot — create_ggtree_plot","text":"setlist_tree distance tree object plotted.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ggtree Plot — create_ggtree_plot","text":"ggtree plot object.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ggtree Plot — create_ggtree_plot","text":"","code":"library(ggtree) #> Error in library(ggtree): there is no package called ‘ggtree’ # Example tree structure (replace with actual tree object) setlist_tree <- rtree(10)  # Generate a random tree with 10 tips #> Error in rtree(10): could not find function \"rtree\" plot <- create_ggtree_plot(setlist_tree) #> Error in ggtree(setlist_tree): could not find function \"ggtree\" print(plot) #> function (x, y, ...)  #> UseMethod(\"plot\") #> <bytecode: 0x5579f9c3ef70> #> <environment: namespace:base>"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot_colored.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a ggtree Plot with Colored Tips — create_ggtree_plot_colored","title":"Create a ggtree Plot with Colored Tips — create_ggtree_plot_colored","text":"function generates ggtree plot given concert setlists distance tree, tree tips colored either country leg.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot_colored.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a ggtree Plot with Colored Tips — create_ggtree_plot_colored","text":"","code":"create_ggtree_plot_colored(   setlist_tree,   show_info,   color_by = c(\"country\", \"leg\") )"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot_colored.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a ggtree Plot with Colored Tips — create_ggtree_plot_colored","text":"setlist_tree concert setlists distance tree object plotted. show_info data frame containing show information, including city-date, country, leg. color_by string indicating whether color tips \"country\" \"leg\".","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot_colored.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a ggtree Plot with Colored Tips — create_ggtree_plot_colored","text":"ggtree plot object colored tips.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_ggtree_plot_colored.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a ggtree Plot with Colored Tips — create_ggtree_plot_colored","text":"","code":"library(ggtree) #> Error in library(ggtree): there is no package called ‘ggtree’ # Example tree structure (replace with actual tree object) setlist_tree <- rtree(10)  # Generate a random tree with 10 tips #> Error in rtree(10): could not find function \"rtree\" show_info <- data.frame(city_date = paste(\"City\", 1:10),                          country = sample(c(\"USA\", \"Canada\"), 10, replace = TRUE),                          leg = sample(c(\"Leg 1\", \"Leg 2\"), 10, replace = TRUE)) plot <- create_colored_ggtree_plot(setlist_tree, show_info, color_by = \"country\") #> Error in create_colored_ggtree_plot(setlist_tree, show_info, color_by = \"country\"): could not find function \"create_colored_ggtree_plot\" print(plot) #> function (x, y, ...)  #> UseMethod(\"plot\") #> <bytecode: 0x5579f9c3ef70> #> <environment: namespace:base>"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Multiple Setlist Alignment — create_setlist_alignment","title":"Create Multiple Setlist Alignment — create_setlist_alignment","text":"function creates multiple setlist alignment using custom pairwise alignment approach followed Needleman-Wunsch algorithm approach.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Multiple Setlist Alignment — create_setlist_alignment","text":"","code":"create_setlist_alignment(data, max_shows = 20)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Multiple Setlist Alignment — create_setlist_alignment","text":"data data frame containing least following columns: date: Date show song_title: Title song max_shows Integer. Maximum number representative shows include alignment (default: 20)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Multiple Setlist Alignment — create_setlist_alignment","text":"data frame aligned setlists, containing following columns: date: Date show position: Position song aligned setlist song_title: Title song (NA gaps alignment)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_alignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Multiple Setlist Alignment — create_setlist_alignment","text":"","code":"if (FALSE) { # \\dontrun{ data(concert_data) aligned_setlists <- create_setlist_alignment(concert_data, max_shows = 10) head(aligned_setlists) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_fasta_mafft.html","id":null,"dir":"Reference","previous_headings":"","what":"Create FASTA Format for MAFFT Alignment — create_setlist_fasta_mafft","title":"Create FASTA Format for MAFFT Alignment — create_setlist_fasta_mafft","text":"function creates FASTA format output representative setlists use MAFFT multiple sequence alignment.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_fasta_mafft.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create FASTA Format for MAFFT Alignment — create_setlist_fasta_mafft","text":"","code":"create_setlist_fasta_mafft(representative_setlists)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_fasta_mafft.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create FASTA Format for MAFFT Alignment — create_setlist_fasta_mafft","text":"representative_setlists data frame containing two columns: showID: character vector show identifiers sequence: character vector encoded setlist sequences","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_fasta_mafft.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create FASTA Format for MAFFT Alignment — create_setlist_fasta_mafft","text":"character vector containing FASTA format output, entry consists header line (>showID) followed corresponding sequence.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_fasta_mafft.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create FASTA Format for MAFFT Alignment — create_setlist_fasta_mafft","text":"","code":"if (FALSE) { # \\dontrun{ representative_setlists <- data.frame(   showID = c(\"1408\", \"1320\"),   sequence = c(\"35 66 44 55 65 45 34 4F 59 48 5D 43 4A 57 68 51 6C 61 6D 42 6B 27\",                \"35 66 44 5F 62 45 34 4F 59 48 5D 43 4A 57 68 51 60 69 6D 42 6B 27\") ) fasta_output <- create_setlist_fasta_mafft(representative_setlists) print(fasta_output) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_viz_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","title":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","text":"function processes alignment data creates detailed dataset visualizing setlist alignments. expands sequences individual positions, matches song codes titles, incorporates date information, includes city names.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_viz_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","text":"","code":"create_setlist_viz_data(alignment_data, song_code_lookup, concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_viz_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","text":"alignment_data data frame containing alignment data columns: showID sequence. song_code_lookup data frame song code information, including columns: hex_char, song_title, four_letter_code. concert_data data frame containing show information, including columns: showID, date, city.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_viz_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","text":"data frame columns:   date, position, song_title, four_letter_code, is_gap, city","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_viz_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","text":"Create Visualization Data Setlist Alignment","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/create_setlist_viz_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Visualization Data for Setlist Alignment — create_setlist_viz_data","text":"","code":"if (FALSE) { # \\dontrun{ viz_data <- create_setlist_viz_data(alignment_data, song_code_lookup, concert_data) head(viz_data) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/extract_unique_shows.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract Unique Shows from Concert Data — extract_unique_shows","title":"Extract Unique Shows from Concert Data — extract_unique_shows","text":"function processes concert data extract unique shows,","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/extract_unique_shows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract Unique Shows from Concert Data — extract_unique_shows","text":"","code":"extract_unique_shows(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/extract_unique_shows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract Unique Shows from Concert Data — extract_unique_shows","text":"concert_data concertData frame containing concert data least 'showID', 'venue', 'city', 'country', 'date', 'tour' columns.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/extract_unique_shows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract Unique Shows from Concert Data — extract_unique_shows","text":"data frame unique shows, sorted date.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/extract_unique_shows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract Unique Shows from Concert Data — extract_unique_shows","text":"","code":"concert_data <- data.frame(   showID = c(1, 1, 2),   venue = c(\"Venue A\", \"Venue A\", \"Venue B\"),   city = c(\"City X\", \"City X\", \"City Y\"),   country = c(\"Country A\", \"Country A\", \"Country B\"),   date = as.Date(c(\"2023-01-01\", \"2023-01-01\", \"2023-01-02\")),   tour = c(\"Tour 1\", \"Tour 1\", \"Tour 1\"),   song_title = c(\"Song A\", \"Song B\", \"Song C\") ) unique_shows <- extract_unique_shows(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_longest_setlists.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Longest Setlists — find_longest_setlists","title":"Find Longest Setlists — find_longest_setlists","text":"function identifies concerts maximum number songs played concert dataset.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_longest_setlists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Longest Setlists — find_longest_setlists","text":"","code":"find_longest_setlists(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_longest_setlists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Longest Setlists — find_longest_setlists","text":"concert_data data frame containing concert information columns: song_position, date, city, country, venue","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_longest_setlists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Longest Setlists — find_longest_setlists","text":"data frame showing concerts maximum number songs,         including date, city, country, venue, number songs played","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_longest_setlists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Longest Setlists — find_longest_setlists","text":"","code":"if (FALSE) { # \\dontrun{ data <- read.csv(\"u2concerts.csv\") find_longest_setlists(data) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_cities.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Frequently Played Cities — find_most_played_cities","title":"Find Most Frequently Played Cities — find_most_played_cities","text":"Identifies cities shows performed, based unique show IDs.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_cities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Frequently Played Cities — find_most_played_cities","text":"","code":"find_most_played_cities(concert_data, n = 15)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_cities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Frequently Played Cities — find_most_played_cities","text":"concert_data data frame containing concert information columns: showID city n Integer specifying many top cities return (default 15)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_cities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Frequently Played Cities — find_most_played_cities","text":"data frame sorted number shows (descending), containing columns:         city number shows","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_cities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Frequently Played Cities — find_most_played_cities","text":"","code":"if (FALSE) { # \\dontrun{ top_cities <- find_most_played_cities(concert_data) top_cities <- find_most_played_cities(concert_data, n = 10)  # Show only top 10 } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_closing_songs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Played Closing Songs — find_most_played_closing_songs","title":"Find Most Played Closing Songs — find_most_played_closing_songs","text":"Identifies frequently played closing songs concerts.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_closing_songs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Played Closing Songs — find_most_played_closing_songs","text":"","code":"find_most_played_closing_songs(concert_data, n = 10)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_closing_songs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Played Closing Songs — find_most_played_closing_songs","text":"concert_data data frame containing concert information columns: showID, song_title, song_position, snippet n Integer specifying many top closing songs return (default 10)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_closing_songs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Played Closing Songs — find_most_played_closing_songs","text":"data frame sorted frequency (descending), containing columns:         song_title times_played (number times played closing song)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_closing_songs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Played Closing Songs — find_most_played_closing_songs","text":"","code":"if (FALSE) { # \\dontrun{ top_closers <- find_most_played_closing_songs(concert_data) top_closers <- find_most_played_closing_songs(concert_data, n = 15)  # Show top 15 } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_countries.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Frequently Played Countries — find_most_played_countries","title":"Find Most Frequently Played Countries — find_most_played_countries","text":"Identifies countries shows performed, based unique show IDs.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_countries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Frequently Played Countries — find_most_played_countries","text":"","code":"find_most_played_countries(concert_data, n = 10)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_countries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Frequently Played Countries — find_most_played_countries","text":"concert_data data frame containing concert information columns: showID country n Integer specifying many top countries return (default 10)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_countries.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Frequently Played Countries — find_most_played_countries","text":"data frame sorted number shows (descending), containing columns:         country number shows","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_countries.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Frequently Played Countries — find_most_played_countries","text":"","code":"if (FALSE) { # \\dontrun{ top_countries <- find_most_played_countries(concert_data) top_countries <- find_most_played_countries(concert_data, n = 15)  # Show top 15 } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_song_by_year.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Played Opening Songs by Year — find_most_played_opening_song_by_year","title":"Find Most Played Opening Songs by Year — find_most_played_opening_song_by_year","text":"Identifies frequently played opening song year.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_song_by_year.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Played Opening Songs by Year — find_most_played_opening_song_by_year","text":"","code":"find_most_played_opening_song_by_year(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_song_by_year.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Played Opening Songs by Year — find_most_played_opening_song_by_year","text":"concert_data data frame containing concert information columns: date, song_title, song_position, snippet","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_song_by_year.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Played Opening Songs by Year — find_most_played_opening_song_by_year","text":"data frame sorted year (ascending), containing columns:         year, song_title, times_played (number times song played opener year)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_song_by_year.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Played Opening Songs by Year — find_most_played_opening_song_by_year","text":"","code":"if (FALSE) { # \\dontrun{ opening_timeline <- find_most_played_opening_song_by_year(concert_data) print(opening_timeline, n = nrow(opening_timeline)) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Played Opening Songs — find_most_played_opening_songs","title":"Find Most Played Opening Songs — find_most_played_opening_songs","text":"Identifies songs frequently played opening songs concerts, excluding appearances snippet opening.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Played Opening Songs — find_most_played_opening_songs","text":"","code":"find_most_played_opening_songs(concert_data, n = NULL)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Played Opening Songs — find_most_played_opening_songs","text":"concert_data data frame containing concert information columns: date, city, song_title, song_position, snippet n Integer specifying many top opening songs return (default )","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Played Opening Songs — find_most_played_opening_songs","text":"data frame sorted frequency (descending), containing columns:         song_title times_played (number times played opening song)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Played Opening Songs — find_most_played_opening_songs","text":"","code":"if (FALSE) { # \\dontrun{ top_openers <- find_most_played_opening_songs(concert_data) top_openers <- find_most_played_opening_songs(concert_data, n = 10)  # Show top 10 } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs_by_tour.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Played Opening Songs by Tour — find_most_played_opening_songs_by_tour","title":"Find Most Played Opening Songs by Tour — find_most_played_opening_songs_by_tour","text":"Identifies frequently played opening songs tour.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs_by_tour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Played Opening Songs by Tour — find_most_played_opening_songs_by_tour","text":"","code":"find_most_played_opening_songs_by_tour(concert_data, top_n = 3)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs_by_tour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Played Opening Songs by Tour — find_most_played_opening_songs_by_tour","text":"concert_data data frame containing concert information columns: tour, date, song_title, song_position, snippet top_n Integer specifying maximum number top opening songs return per tour (default 3)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs_by_tour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Played Opening Songs by Tour — find_most_played_opening_songs_by_tour","text":"data frame sorted tour start date (descending), containing columns:         tour, song_title, times_played. tour, returns 'top_n'         played opening songs, fewer tour less unique opening songs.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_opening_songs_by_tour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Played Opening Songs by Tour — find_most_played_opening_songs_by_tour","text":"","code":"if (FALSE) { # \\dontrun{ top_openers_by_tour <- find_most_played_opening_songs_by_tour(concert_data) top_5_openers_by_tour <- find_most_played_opening_songs_by_tour(concert_data, top_n = 5) print(top_openers_by_tour) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_songs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Played Songs — find_most_played_songs","title":"Find Most Played Songs — find_most_played_songs","text":"function calculates returns frequently played songs dataset, including total plays, regular plays, snippet plays.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_songs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Played Songs — find_most_played_songs","text":"","code":"find_most_played_songs(concert_data, n = 10)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_songs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Played Songs — find_most_played_songs","text":"n integer specifying number top played songs return. Default 10. data concertData data frame containing song play data.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_songs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Played Songs — find_most_played_songs","text":"data frame four columns: song_title, times_played_total, times_played_regular, times_played_snippet, sorted descending order times_played_total.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_songs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Played Songs — find_most_played_songs","text":"","code":"if (FALSE) { # \\dontrun{ top_songs <- find_most_played_songs(concert_data) top_songs <- find_most_played_songs(concert_data, n = 5) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_venues.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Frequently Played Venues — find_most_played_venues","title":"Find Most Frequently Played Venues — find_most_played_venues","text":"Identifies venues shows performed, based unique show IDs. Includes venue city information.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_venues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Frequently Played Venues — find_most_played_venues","text":"","code":"find_most_played_venues(concert_data, n = 10)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_venues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Frequently Played Venues — find_most_played_venues","text":"concert_data data frame containing concert information columns: showID, venue, city n Integer specifying many top venues return (default 10)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_venues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Frequently Played Venues — find_most_played_venues","text":"data frame sorted number shows (descending), containing columns:         venue, city, number shows","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_played_venues.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Frequently Played Venues — find_most_played_venues","text":"","code":"if (FALSE) { # \\dontrun{ top_venues <- find_most_played_venues(concert_data) top_venues <- find_most_played_venues(concert_data, n = 15)  # Show top 15 } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_representative_setlists.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Most Representative Setlists — find_most_representative_setlists","title":"Find Most Representative Setlists — find_most_representative_setlists","text":"function identifies specified number shows highest average similarity shows' setlists, effectively finding representative setlists dataset.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_representative_setlists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Most Representative Setlists — find_most_representative_setlists","text":"","code":"find_most_representative_setlists(show_sequences_all, n_representatives = 30)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_representative_setlists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Most Representative Setlists — find_most_representative_setlists","text":"show_sequences_all data frame containing least two columns: sequence: character vector setlist sequences. columns containing show information. n_representatives integer specifying number representative setlists find. Default 30.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_representative_setlists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Most Representative Setlists — find_most_representative_setlists","text":"data frame containing representative setlists,         structure input data frame.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_most_representative_setlists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Most Representative Setlists — find_most_representative_setlists","text":"","code":"if (FALSE) { # \\dontrun{ # Assuming show_sequences_all is your dataset representative_shows <- find_most_representative_setlists(show_sequences_all, n_representatives = 30) print(representative_shows) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_shows_with_most_snippets.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Shows with Most Snippets — find_shows_with_most_snippets","title":"Find Shows with Most Snippets — find_shows_with_most_snippets","text":"Identifies concerts highest number song snippets played. snippet short piece song (either another artist U2 ) played part regular song show.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_shows_with_most_snippets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Shows with Most Snippets — find_shows_with_most_snippets","text":"","code":"find_shows_with_most_snippets(concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_shows_with_most_snippets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Shows with Most Snippets — find_shows_with_most_snippets","text":"concert_data data frame containing concert information columns: date, city, country, venue, snippet (logical)","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_shows_with_most_snippets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Shows with Most Snippets — find_shows_with_most_snippets","text":"data frame sorted number snippets (descending) date (descending),         containing columns: date, city, country, venue, number snippets played","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/find_shows_with_most_snippets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Shows with Most Snippets — find_shows_with_most_snippets","text":"","code":"if (FALSE) { # \\dontrun{ shows_with_snippets <- find_shows_with_most_snippets(concert_data) head(shows_with_snippets) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/format_alignment_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Format Alignment Data — format_alignment_data","title":"Format Alignment Data — format_alignment_data","text":"function processes aligned setlist data formats alignment data frame show IDs encoded song sequences, including dashes skipped songs.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/format_alignment_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format Alignment Data — format_alignment_data","text":"","code":"format_alignment_data(aligned_setlists, codes_tour_songs, concert_data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/format_alignment_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format Alignment Data — format_alignment_data","text":"aligned_setlists data frame containing aligned setlist information. codes_tour_songs data frame containing song codes hex characters. concert_data data frame containing concert information including show IDs.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/format_alignment_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format Alignment Data — format_alignment_data","text":"data frame columns: showID Numeric identifier show sequence Character string representing encoded song sequence","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/four_letter_code_to_hex.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert 4-Letter Code to Unique Hex Character — four_letter_code_to_hex","title":"Convert 4-Letter Code to Unique Hex Character — four_letter_code_to_hex","text":"Convert 4-Letter Code Unique Hex Character","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/four_letter_code_to_hex.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert 4-Letter Code to Unique Hex Character — four_letter_code_to_hex","text":"","code":"four_letter_code_to_hex(code, used_hex_codes)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/four_letter_code_to_hex.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert 4-Letter Code to Unique Hex Character — four_letter_code_to_hex","text":"code character string length 4 representing song code. used_hex_codes vector already used hex codes ensure uniqueness.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/four_letter_code_to_hex.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert 4-Letter Code to Unique Hex Character — four_letter_code_to_hex","text":"list containing two elements: char: single character representing unique hex character. value: numeric value hex character.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/generate_setlist_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Setlist Data for Each Show — generate_setlist_data","title":"Generate Setlist Data for Each Show — generate_setlist_data","text":"Creates summary setlist data show, including number unique songs list songs played.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/generate_setlist_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Setlist Data for Each Show — generate_setlist_data","text":"","code":"generate_setlist_data(data, tour_order = NULL)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/generate_setlist_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Setlist Data for Each Show — generate_setlist_data","text":"data data frame concertData format, containing least 'showID', 'tour', 'date', 'song_title' columns. tour_order data frame 'tour' column specifying desired order tours (optional).","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/generate_setlist_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Setlist Data for Each Show — generate_setlist_data","text":"data frame columns: showID: Unique identifier show tour: Name tour (factor tour_order provided) date: Date show songs: Number songs played show song_list: Semicolon-separated list songs played show","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/generate_setlist_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Setlist Data for Each Show — generate_setlist_data","text":"","code":"if (FALSE) { # \\dontrun{ setlist_summary <- generate_setlist_data(concert_data) setlist_summary_ordered <- generate_setlist_data(concert_data, tour_order) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/geocode_cities.html","id":null,"dir":"Reference","previous_headings":"","what":"Geocode Cities — geocode_cities","title":"Geocode Cities — geocode_cities","text":"function geocodes unique locations, either reading existing file performing geocoding saving results file.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/geocode_cities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geocode Cities — geocode_cities","text":"","code":"geocode_cities(geocoded_file_path, unique_locations)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/geocode_cities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geocode Cities — geocode_cities","text":"geocoded_file_path string specifying file path geocoded cities data. unique_locations data frame containing unique locations geocoded.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/geocode_cities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geocode Cities — geocode_cities","text":"data frame geocoded city information.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/geocode_cities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Geocode Cities — geocode_cities","text":"","code":"geocoded_file_path <- \"path/to/geocoded_cities.csv\" unique_locations <- data.frame(   location = c(\"New York, USA\", \"London, UK\", \"Paris, France\") ) geocoded_cities <- geocode_cities(geocoded_file_path, unique_locations) #> Error in value[[3L]](cond): Geocoding error: there is no package called ‘tidygeocoder’"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/get_concert_locations.html","id":null,"dir":"Reference","previous_headings":"","what":"Get City - Country Locations from Concert Data — get_concert_locations","title":"Get City - Country Locations from Concert Data — get_concert_locations","text":"function extracts city country data data frame concert info, creating unique list locations can example used look geographical coordinates","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/get_concert_locations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get City - Country Locations from Concert Data — get_concert_locations","text":"","code":"get_concert_locations(data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/get_concert_locations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get City - Country Locations from Concert Data — get_concert_locations","text":"data data frame containing concert info 'city' 'country' columns.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/get_concert_locations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get City - Country Locations from Concert Data — get_concert_locations","text":"data frame unique city-country pairs combined 'location' column.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/get_concert_locations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get City - Country Locations from Concert Data — get_concert_locations","text":"","code":"city_data <- data.frame(   city = c(\"New York\", \"London\", \"\"),   country = c(\"USA\", \"UK\", \"France\") ) unique_locations <- get_concert_locations(unique_shows) #> Error in value[[3L]](cond): Error processing cities: object 'unique_shows' not found"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/hello.html","id":null,"dir":"Reference","previous_headings":"","what":"Hello, World! — hello","title":"Hello, World! — hello","text":"Prints 'Hello, world!'.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/hello.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hello, World! — hello","text":"","code":"hello()"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/hello.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hello, World! — hello","text":"","code":"hello() #> Error in hello(): could not find function \"hello\""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/longest_setlist_by_tour.html","id":null,"dir":"Reference","previous_headings":"","what":"Find Longest Setlist by Tour — longest_setlist_by_tour","title":"Find Longest Setlist by Tour — longest_setlist_by_tour","text":"Calculates maximum number songs played single show tour.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/longest_setlist_by_tour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find Longest Setlist by Tour — longest_setlist_by_tour","text":"","code":"longest_setlist_by_tour(data)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/longest_setlist_by_tour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find Longest Setlist by Tour — longest_setlist_by_tour","text":"data data frame concertData format, containing least 'tour' 'song_position' columns.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/longest_setlist_by_tour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find Longest Setlist by Tour — longest_setlist_by_tour","text":"data frame columns: tour: Name tour max_songs: Maximum number songs played single show tour","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/longest_setlist_by_tour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find Longest Setlist by Tour — longest_setlist_by_tour","text":"","code":"if (FALSE) { # \\dontrun{ longest_setlists <- longest_setlist_by_tour(concert_data) print(longest_setlists) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/prepare_setlist_sequences.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Setlist Sequences — prepare_setlist_sequences","title":"Prepare Setlist Sequences — prepare_setlist_sequences","text":"function prepares setlist sequences concert data song codes. creates data frame show IDs corresponding encoded setlist sequences.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/prepare_setlist_sequences.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Setlist Sequences — prepare_setlist_sequences","text":"","code":"prepare_setlist_sequences(concert_data, codes_tour_songs)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/prepare_setlist_sequences.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Setlist Sequences — prepare_setlist_sequences","text":"concert_data data frame containing concert information least following columns: showID: Numeric identifier show song_position: Numeric position song setlist song_title: Character string song title codes_tour_songs data frame containing song codes least following columns: song_title: Character string song title hex_value: Character string hexadecimal code song","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/prepare_setlist_sequences.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Setlist Sequences — prepare_setlist_sequences","text":"data frame two columns: showID: Character vector show identifiers sequence: Character vector encoded setlist sequences","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/prepare_setlist_sequences.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare Setlist Sequences — prepare_setlist_sequences","text":"","code":"if (FALSE) { # \\dontrun{ data(concert_data) data(codes_tour_songs) setlist_sequences <- prepare_setlist_sequences(concert_data, codes_tour_songs) head(setlist_sequences) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_concertData_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"Read concertData CSV File — read_concertData_csv","title":"Read concertData CSV File — read_concertData_csv","text":"Reads CSV file concertData format error handling, providing informative error messages file read conform expected format.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_concertData_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read concertData CSV File — read_concertData_csv","text":"","code":"read_concertData_csv(file_path)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_concertData_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read concertData CSV File — read_concertData_csv","text":"file_path string specifying path CSV file read.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_concertData_csv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read concertData CSV File — read_concertData_csv","text":"data frame containing concert data CSV file.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_concertData_csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read concertData CSV File — read_concertData_csv","text":"input CSV file must conform concertData format, includes following required columns: showID: Unique identifier show date: Date concert (YYYY-MM-DD format) tour: Name tour city: City concert took place country: Country concert took place venue: Name venue song_position: Position song setlist song_title: Title song snippet: Boolean indicating song snippet (TRUE) full performance (FALSE) Additional columns may present include: encore: Boolean indicating song encore performance (TRUE) main set (FALSE) state: State concert took place show_url: URL information show song_url: URL information song song_lyrics: Lyrics song performed","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_concertData_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read concertData CSV File — read_concertData_csv","text":"","code":"if (FALSE) { # \\dontrun{ concert_data <- read_concertData_csv(\"path/to/your/concertdata.csv\") } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_mafft_clustal_alignment.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","title":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","text":"function reads parses multiple sequence alignment file produced MAFFT –text algorithm. extracts showID sequence information file returns data frame.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_mafft_clustal_alignment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","text":"","code":"read_mafft_clustal_alignment(file_path)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_mafft_clustal_alignment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","text":"file_path character string specifying path MAFFT Clustal alignment file.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_mafft_clustal_alignment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","text":"data frame two columns: showID: integer vector show identifiers. sequence: character vector aligned sequences.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_mafft_clustal_alignment.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","text":"Parse MAFFT Clustal Alignment File","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/read_mafft_clustal_alignment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse MAFFT Clustal Alignment File — read_mafft_clustal_alignment","text":"","code":"if (FALSE) { # \\dontrun{ alignment_data <- read_mafft_clustal_alignment(\"path/to/mafft_alignment.txt\") head(alignment_data) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/tour_order_by_date.html","id":null,"dir":"Reference","previous_headings":"","what":"Order Tours by Date — tour_order_by_date","title":"Order Tours by Date — tour_order_by_date","text":"Orders tours based median date, either ascending descending chronological order.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/tour_order_by_date.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Order Tours by Date — tour_order_by_date","text":"","code":"tour_order_by_date(data, ascending = FALSE)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/tour_order_by_date.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Order Tours by Date — tour_order_by_date","text":"data data frame concertData format, containing least 'tour' 'date' columns. ascending Logical. TRUE, orders tours earliest latest. FALSE (default), orders latest earliest.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/tour_order_by_date.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Order Tours by Date — tour_order_by_date","text":"data frame columns: tour: Factor tour names, ordered chronologically median_date: median date tour","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/tour_order_by_date.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Order Tours by Date — tour_order_by_date","text":"","code":"if (FALSE) { # \\dontrun{ tour_order <- tour_order_by_date(concert_data) tour_order_asc <- tour_order_by_date(concert_data, ascending = TRUE) } # }"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/transform_city_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform City Frequency Data — transform_city_frequency","title":"Transform City Frequency Data — transform_city_frequency","text":"function transforms city frequency data adding log-transformed show count categorizing cities based show counts using custom breaks.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/transform_city_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform City Frequency Data — transform_city_frequency","text":"","code":"transform_city_frequency(city_frequency, breaks)"},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/transform_city_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform City Frequency Data — transform_city_frequency","text":"city_frequency data frame containing city frequency information, including 'show_count' column. breaks numeric vector break points categorizing show counts.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/transform_city_frequency.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform City Frequency Data — transform_city_frequency","text":"data frame additional columns log-transformed show counts show count categories.","code":""},{"path":"https://vanleeuwen-hans.github.io/concertData/reference/transform_city_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform City Frequency Data — transform_city_frequency","text":"","code":"city_frequency <- data.frame(   city = c(\"New York\", \"London\", \"Paris\", \"Berlin\"),   country = c(\"USA\", \"UK\", \"France\", \"Germany\"),   show_count = c(50, 25, 10, 1) ) breaks <- c(0, 1, 5, 10, 25, 50, 100, Inf) transformed_data <- transform_city_frequency(city_frequency, breaks)"}]
